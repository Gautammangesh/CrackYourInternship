class Solution {
    // Directions array representing the 4 possible movements (up, down, left, right)
    private static final int[][] DIRECTIONS = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

    // Function to find the minimum time required to rot all oranges.
    public int orangesRotting(int[][] grid) {
        int rows = grid.length;
        int cols = grid[0].length;
        Queue<int[]> queue = new LinkedList<>();
        int freshOranges = 0;

        // Step 1: Initialize the queue with all the rotten oranges and count the fresh oranges.
        for (int r = 0; r < rows; r++) {
            for (int c = 0; c < cols; c++) {
                if (grid[r][c] == 2) {
                    queue.offer(new int[]{r, c});
                } else if (grid[r][c] == 1) {
                    freshOranges++;
                }
            }
        }

        // If there are no fresh oranges, return 0.
        if (freshOranges == 0) return 0;

        int minutes = 0;

        // Step 2: Perform BFS to rot the fresh oranges.
        while (!queue.isEmpty()) {
            int size = queue.size();
            boolean rottedThisMinute = false;

            for (int i = 0; i < size; i++) {
                int[] current = queue.poll();
                int row = current[0];
                int col = current[1];

                // Explore the four possible directions.
                for (int[] direction : DIRECTIONS) {
                    int newRow = row + direction[0];
                    int newCol = col + direction[1];

                    // Check if the new cell is within bounds and is a fresh orange.
                    if (newRow >= 0 && newRow < rows && newCol >= 0 && newCol < cols && grid[newRow][newCol] == 1) {
                        // Rot the fresh orange.
                        grid[newRow][newCol] = 2;
                        queue.offer(new int[]{newRow, newCol});
                        freshOranges--;
                        rottedThisMinute = true;
                    }
                }
            }

            // If any orange rotted in this minute, increment the time.
            if (rottedThisMinute) minutes++;
        }

        // If there are still fresh oranges left, return -1. Otherwise, return the minutes taken.
        return freshOranges == 0 ? minutes : -1;
    }
}
