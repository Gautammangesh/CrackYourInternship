class Solution {
    public boolean isBipartite(int V, ArrayList<ArrayList<Integer>> adj) {
        // Array to store the color of each vertex, initialized to -1
        int[] color = new int[V];
        Arrays.fill(color, -1);

        // Try to color each component
        for (int i = 0; i < V; i++) {
            // If the vertex is uncolored, start BFS from this vertex
            if (color[i] == -1) {
                if (!bfsCheck(i, adj, color)) {
                    return false;
                }
            }
        }
        return true; // If all components are bipartite, return true
    }

    // BFS function to check if the component containing src is bipartite
    private boolean bfsCheck(int src, ArrayList<ArrayList<Integer>> adj, int[] color) {
        Queue<Integer> queue = new LinkedList<>();
        queue.add(src);
        color[src] = 0; // Assign the first color

        while (!queue.isEmpty()) {
            int node = queue.poll();

            for (int neighbor : adj.get(node)) {
                if (color[neighbor] == -1) {
                    // If the neighbor hasn't been colored, color it with the opposite color
                    color[neighbor] = 1 - color[node];
                    queue.add(neighbor);
                } else if (color[neighbor] == color[node]) {
                    // If the neighbor has the same color as the current node, it's not bipartite
                    return false;
                }
            }
        }
        return true; // If no conflicts found, the component is bipartite
    }
}
