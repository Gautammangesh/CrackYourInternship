class Node {
    int data;
    Node next;

    Node(int x) {
        data = x;
        next = null;
    }

    // Utility function to print the linked list
    static void printList(Node node) {
        while (node != null) {
            System.out.print(node.data + " ");
            node = node.next;
        }
    }
}

class Solution {
    public Node subLinkedList(Node head1, Node head2) {
        // Reverse both linked lists to process from least significant digit
        head1 = reverseList(head1);
        head2 = reverseList(head2);

        // Compare both linked lists
        if (compare(head1, head2) < 0) {
            // Swap head1 and head2 if head2 represents a larger number
            Node temp = head1;
            head1 = head2;
            head2 = temp;
        }

        // Subtract smaller from larger
        Node resultHead = subtractLists(head1, head2);

        // Reverse the result to get the correct order
        resultHead = reverseList(resultHead);

        // Remove leading zeros if any
        resultHead = removeLeadingZeros(resultHead);

        return resultHead;
    }

    // Function to reverse the linked list
    private Node reverseList(Node head) {
        Node prev = null, curr = head;
        while (curr != null) {
            Node next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }

    // Function to compare two linked lists
    private int compare(Node head1, Node head2) {
        while (head1 != null && head2 != null) {
            if (head1.data > head2.data) return 1;
            if (head1.data < head2.data) return -1;
            head1 = head1.next;
            head2 = head2.next;
        }
        if (head1 != null) return 1;
        if (head2 != null) return -1;
        return 0;
    }

    // Function to subtract two linked lists
    private Node subtractLists(Node head1, Node head2) {
        Node resultHead = null, resultTail = null;
        int borrow = 0;

        while (head1 != null) {
            int diff = head1.data - (head2 != null ? head2.data : 0) - borrow;

            if (diff < 0) {
                diff += 10;
                borrow = 1;
            } else {
                borrow = 0;
            }

            Node newNode = new Node(diff);

            if (resultHead == null) {
                resultHead = newNode;
                resultTail = newNode;
            } else {
                resultTail.next = newNode;
                resultTail = newNode;
            }

            head1 = head1.next;
            if (head2 != null) head2 = head2.next;
        }

        return resultHead;
    }

    // Function to remove leading zeros
    private Node removeLeadingZeros(Node head) {
        while (head != null && head.data == 0) {
            head = head.next;
        }
        return head != null ? head : new Node(0);
    }
}
