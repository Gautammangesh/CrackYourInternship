import java.util.ArrayList;

class Solution {
    // Function to return a list containing the DFS traversal of the graph.
    public ArrayList<Integer> dfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        ArrayList<Integer> result = new ArrayList<>();
        boolean[] visited = new boolean[V];
        dfs(0, adj, visited, result);
        return result;
    }
    
    // Helper function to perform DFS recursively.
    private void dfs(int node, ArrayList<ArrayList<Integer>> adj, boolean[] visited, ArrayList<Integer> result) {
        // Mark the current node as visited.
        visited[node] = true;
        // Add the current node to the result list.
        result.add(node);
        
        // Traverse the adjacent nodes.
        for (int neighbor : adj.get(node)) {
            if (!visited[neighbor]) {
                dfs(neighbor, adj, visited, result);
            }
        }
    }
}
