class Solution {
    // Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] visited = new boolean[V];
        boolean[] recStack = new boolean[V];
        
        // Check for cycle in each DFS tree starting from each vertex.
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                if (dfs(i, visited, recStack, adj)) {
                    return true;
                }
            }
        }
        return false;
    }
    
    // Helper function to perform DFS and check for cycles.
    private boolean dfs(int node, boolean[] visited, boolean[] recStack, ArrayList<ArrayList<Integer>> adj) {
        // Mark the current node as visited and add it to the recursion stack.
        visited[node] = true;
        recStack[node] = true;
        
        // Traverse all adjacent vertices.
        for (int neighbor : adj.get(node)) {
            // If the neighbor is not visited, do DFS on it.
            if (!visited[neighbor]) {
                if (dfs(neighbor, visited, recStack, adj)) {
                    return true;
                }
            }
            // If the neighbor is already in the recursion stack, a cycle is found.
            else if (recStack[neighbor]) {
                return true;
            }
        }
        
        // Remove the current node from the recursion stack before returning.
        recStack[node] = false;
        return false;
    }
}
