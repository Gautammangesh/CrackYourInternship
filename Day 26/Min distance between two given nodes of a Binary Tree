// FUNCTION CODE
/* A Binary Tree node */
class Node {
    int data;
    Node left, right;
    Node(int item) {
        data = item;
        left = right = null;
    }
}

class GfG {
    // Function to find the LCA of two nodes a and b
    Node findLCA(Node root, int a, int b) {
        if (root == null) {
            return null;
        }

        if (root.data == a || root.data == b) {
            return root;
        }

        Node leftLCA = findLCA(root.left, a, b);
        Node rightLCA = findLCA(root.right, a, b);

        if (leftLCA != null && rightLCA != null) {
            return root;
        }

        return (leftLCA != null) ? leftLCA : rightLCA;
    }

    // Function to find the distance from root to a given node
    int findDistance(Node root, int val, int distance) {
        if (root == null) {
            return -1;
        }

        if (root.data == val) {
            return distance;
        }

        int leftDistance = findDistance(root.left, val, distance + 1);
        if (leftDistance != -1) {
            return leftDistance;
        }

        return findDistance(root.right, val, distance + 1);
    }

    // Function to find the minimum distance between a and b in a tree with the given root
    int findDist(Node root, int a, int b) {
        // Find the LCA of a and b
        Node lca = findLCA(root, a, b);

        // Find the distance from LCA to a
        int distA = findDistance(lca, a, 0);

        // Find the distance from LCA to b
        int distB = findDistance(lca, b, 0);

        // The minimum distance between a and b
        return distA + distB;
    }
}
