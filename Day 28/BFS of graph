import java.util.*;

class Solution {
    // Function to return Breadth First Traversal of the given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // To store the BFS traversal result
        ArrayList<Integer> bfsTraversal = new ArrayList<>();

        // Array to keep track of visited nodes
        boolean[] visited = new boolean[V];

        // Queue for BFS
        Queue<Integer> queue = new LinkedList<>();

        // Start BFS from node 0
        queue.add(0);
        visited[0] = true;

        while (!queue.isEmpty()) {
            // Dequeue a vertex from the queue and add it to the BFS result
            int node = queue.poll();
            bfsTraversal.add(node);

            // Get all adjacent vertices of the dequeued vertex
            // If an adjacent vertex has not been visited, mark it visited and enqueue it
            for (int neighbor : adj.get(node)) {
                if (!visited[neighbor]) {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }

        return bfsTraversal;
    }
}
