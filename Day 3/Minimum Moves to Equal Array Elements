<<<<<<< HEAD
class Solution {
    public int minMoves2(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;

        if (n == 1) return 0;

        int mid1 = nums[n / 2];
        int ope1 = 0;

        for (int i = 0; i < n; i++) {
            ope1 += Math.abs(mid1 - nums[i]);
        }

        if (n % 2 == 1) {
            int mid2 = nums[n / 2 + 1];
            int ope2 = 0;
            for (int i = 0; i < n; i++) {
                ope2 += Math.abs(mid2 - nums[i]);
            }
            ope1 = Math.min(ope1, ope2);
        }

        return ope1;
    }
=======
class Solution {
    public int minMoves2(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;

        if (n == 1) return 0;

        int mid1 = nums[n / 2];
        int ope1 = 0;

        for (int i = 0; i < n; i++) {
            ope1 += Math.abs(mid1 - nums[i]);
        }

        if (n % 2 == 1) {
            int mid2 = nums[n / 2 + 1];
            int ope2 = 0;
            for (int i = 0; i < n; i++) {
                ope2 += Math.abs(mid2 - nums[i]);
            }
            ope1 = Math.min(ope1, ope2);
        }

        return ope1;
    }
>>>>>>> c12f2fecff96948c269a28e567d4a62e03f6e97e
}