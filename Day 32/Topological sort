import java.util.*;

class Solution
{
    // Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        int[] topoOrder = new int[V];
        int[] inDegree = new int[V];
        Queue<Integer> queue = new LinkedList<>();
        
        // Step 1: Compute in-degrees of all vertices
        for (int i = 0; i < V; i++) {
            for (int neighbor : adj.get(i)) {
                inDegree[neighbor]++;
            }
        }
        
        // Step 2: Add vertices with in-degree 0 to the queue
        for (int i = 0; i < V; i++) {
            if (inDegree[i] == 0) {
                queue.add(i);
            }
        }
        
        // Step 3: Process vertices in the queue
        int index = 0;
        while (!queue.isEmpty()) {
            int current = queue.poll();
            topoOrder[index++] = current;
            
            // Reduce the in-degree of all neighbors
            for (int neighbor : adj.get(current)) {
                inDegree[neighbor]--;
                // If in-degree becomes 0, add it to the queue
                if (inDegree[neighbor] == 0) {
                    queue.add(neighbor);
                }
            }
        }
        
        return topoOrder;
    }
}
