class Solution {
    public int longestCommonSubstr(String str1, String str2) {
        int n = str1.length();
        int m = str2.length();
        
        // dp[i][j] will store the length of the longest common substring 
        // ending at str1[i-1] and str2[j-1].
        int[][] dp = new int[n + 1][m + 1];
        int maxLength = 0;

        // Fill the dp array
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= m; j++) {
                if (str1.charAt(i - 1) == str2.charAt(j - 1)) {
                    // If characters match, extend the previous substring length by 1.
                    dp[i][j] = dp[i - 1][j - 1] + 1;
                    maxLength = Math.max(maxLength, dp[i][j]);
                } else {
                    // If characters don't match, reset the length of the common substring to 0.
                    dp[i][j] = 0;
                }
            }
        }
        
        // maxLength will store the maximum length of the common substring found.
        return maxLength;
    }
}
