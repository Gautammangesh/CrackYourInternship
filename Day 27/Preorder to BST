class Node {
    int data;
    Node left, right;

    Node(int d) {
        data = d;
        left = right = null;
    }
}

static class Solution {
    int index = 0;

    // Function that constructs BST from its preorder traversal.
    public Node Bst(int pre[], int size) {
        return constructBST(pre, Integer.MIN_VALUE, Integer.MAX_VALUE);
    }

    private Node constructBST(int[] pre, int min, int max) {
        // Base case: if all elements are processed or if the current element is out of the min-max range
        if (index >= pre.length || pre[index] < min || pre[index] > max) {
            return null;
        }

        // The first element of preorder is the root of the BST (or subtree).
        Node root = new Node(pre[index++]);

        // Recursively construct the left and right subtrees.
        root.left = constructBST(pre, min, root.data);
        root.right = constructBST(pre, root.data, max);

        return root;
    }
}
