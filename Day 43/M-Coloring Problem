class solve {
    // Function to determine if graph can be colored with at most M colors
    // such that no two adjacent vertices of graph are colored with the same color.
    public boolean graphColoring(boolean graph[][], int m, int n) {
        // Array to store the color assigned to each vertex
        int[] color = new int[n];

        // Initialize all vertices with no color
        for (int i = 0; i < n; i++) {
            color[i] = 0;
        }

        // Call the recursive helper function to solve the problem
        return solveGraphColoring(graph, m, color, 0, n);
    }

    // Helper function to solve the graph coloring problem using backtracking
    private boolean solveGraphColoring(boolean graph[][], int m, int[] color, int vertex, int n) {
        // If all vertices are assigned a color, return true
        if (vertex == n) {
            return true;
        }

        // Try assigning each color from 1 to m to the current vertex
        for (int c = 1; c <= m; c++) {
            // Check if assigning color c to vertex is safe
            if (isSafe(graph, color, vertex, c, n)) {
                // Assign the color to the vertex
                color[vertex] = c;

                // Recur to assign colors to the remaining vertices
                if (solveGraphColoring(graph, m, color, vertex + 1, n)) {
                    return true;
                }

                // Backtrack: Remove the color assignment
                color[vertex] = 0;
            }
        }

        // If no color can be assigned to this vertex, return false
        return false;
    }

    // Utility function to check if the color assignment is safe
    private boolean isSafe(boolean graph[][], int[] color, int vertex, int c, int n) {
        // Check the adjacent vertices for any color conflicts
        for (int i = 0; i < n; i++) {
            if (graph[vertex][i] && color[i] == c) {
                return false;
            }
        }
        return true;
    }
}
