import java.util.Arrays;
import java.util.Collections;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();  // Number of test cases
        sc.nextLine();  // Consume the remaining newline

        while (t-- > 0) {
            sc.nextLine();  // Consume blank line

            // Read m and n
            int m = sc.nextInt();
            int n = sc.nextInt();

            // Read x (vertical cuts) and y (horizontal cuts)
            Integer[] x = new Integer[m - 1];
            Integer[] y = new Integer[n - 1];

            for (int i = 0; i < m - 1; i++) {
                x[i] = sc.nextInt();
            }
            for (int i = 0; i < n - 1; i++) {
                y[i] = sc.nextInt();
            }

            // Sort x and y in descending order
            Arrays.sort(x, Collections.reverseOrder());
            Arrays.sort(y, Collections.reverseOrder());

            // Greedy approach to calculate minimal cost
            int h = 1, v = 1;  // Number of horizontal and vertical pieces
            int i = 0, j = 0;  // Indexes for x and y
            long cost = 0;

            while (i < m - 1 && j < n - 1) {
                if (x[i] > y[j]) {
                    cost += (long) x[i] * v;
                    h++;
                    i++;
                } else {
                    cost += (long) y[j] * h;
                    v++;
                    j++;
                }
            }

            // Add the remaining cuts
            while (i < m - 1) {
                cost += (long) x[i] * v;
                i++;
            }
            while (j < n - 1) {
                cost += (long) y[j] * h;
                j++;
            }

            System.out.println(cost);

            if (t > 0) {
                System.out.println();  // Print blank line between test cases
            }
        }

        sc.close();
    }
}
