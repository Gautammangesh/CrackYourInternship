import java.util.Arrays;
import java.util.Comparator;

class Solution
{
    // Function to find the maximum profit and the number of jobs done.
    int[] JobScheduling(Job arr[], int n)
    {
        // Step 1: Sort the jobs by profit in descending order
        Arrays.sort(arr, new Comparator<Job>() {
            public int compare(Job a, Job b) {
                return b.profit - a.profit;
            }
        });
        
        // Step 2: Find the maximum deadline
        int maxDeadline = 0;
        for (int i = 0; i < n; i++) {
            maxDeadline = Math.max(maxDeadline, arr[i].deadline);
        }
        
        // Step 3: Create a time slot array to keep track of free time slots
        boolean[] slots = new boolean[maxDeadline + 1]; // +1 because deadlines are 1-based
        Arrays.fill(slots, false);
        
        int jobCount = 0;
        int totalProfit = 0;
        
        // Step 4: Iterate over the jobs and schedule them
        for (int i = 0; i < n; i++) {
            // Find a free slot for this job, starting from its deadline and moving backwards
            for (int j = arr[i].deadline; j > 0; j--) {
                if (!slots[j]) {
                    // If the slot is free, schedule the job here
                    slots[j] = true;
                    jobCount++;
                    totalProfit += arr[i].profit;
                    break;
                }
            }
        }
        
        // Return the total number of jobs done and the total profit
        return new int[]{jobCount, totalProfit};
    }
}

/*
class Job {
    int id, profit, deadline;
    Job(int x, int y, int z){
        this.id = x;
        this.deadline = y;
        this.profit = z; 
    }
}
