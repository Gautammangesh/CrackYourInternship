
public class GFG 
{

	static int optCost(int freq[], int i, int j)
	{
	// Base cases
	if (j < i)	 // no elements in this subarray
		return 0;
	if (j == i)	 // one element in this subarray
		return freq[i];
	
	// Get sum of freq[i], freq[i+1], ... freq[j]
	int fsum = sum(freq, i, j);
	
	// Initialize minimum value
	int min = Integer.MAX_VALUE;

	for (int r = i; r <= j; ++r)
	{
		int cost = optCost(freq, i, r-1) + 
						optCost(freq, r+1, j);
		if (cost < min)
			min = cost;
	}
	
	// Return minimum value
	return min + fsum;
	}

	static int optimalSearchTree(int keys[], int freq[], int n)
	{

		return optCost(freq, 0, n-1);
	}
	
	static int sum(int freq[], int i, int j)
	{
		int s = 0;
		for (int k = i; k <=j; k++)
		s += freq[k];
		return s;
	}
}