class Solution {

	static class Edge {
		int src, dest, weight;
	}


	static class Graph {

		int V, E;

		Edge edge[];
	}

	// Creates a graph with V vertices and E edges
	static Graph createGraph(int V, int E)
	{
		Graph graph = new Graph();
		graph.V = V;
		graph.E = E;
		graph.edge = new Edge[graph.E];

		for (int i = 0; i < graph.E; i++) {
			graph.edge[i] = new Edge();
		}

		return graph;
	}
	static boolean
	isNegCycleBellmanFord(Graph graph, int src, int dist[])
	{
		int V = graph.V;
		int E = graph.E;

		for (int i = 0; i < V; i++)
			dist[i] = Integer.MAX_VALUE;

		dist[src] = 0;

		for (int i = 1; i <= V - 1; i++) {
			for (int j = 0; j < E; j++) {
				int u = graph.edge[j].src;
				int v = graph.edge[j].dest;
				int weight = graph.edge[j].weight;

				if (dist[u] != Integer.MAX_VALUE
					&& dist[u] + weight < dist[v])
					dist[v] = dist[u] + weight;
			}
		}

		for (int i = 0; i < E; i++) {
			int u = graph.edge[i].src;
			int v = graph.edge[i].dest;
			int weight = graph.edge[i].weight;

			if (dist[u] != Integer.MAX_VALUE
				&& dist[u] + weight < dist[v])
				return true;
		}

		return false;
	}

	static boolean isNegCycleDisconnected(Graph graph)
	{
		int V = graph.V;

		boolean visited[] = new boolean[V];
		Arrays.fill(visited, false);

		// This array is filled by Bellman-Ford
		int dist[] = new int[V];

		for (int i = 0; i < V; i++) {
			if (visited[i] == false) {

				// If cycle found
				if (isNegCycleBellmanFord(graph, i, dist))
					return true;

				for (int j = 0; j < V; j++)
					if (dist[j] != Integer.MAX_VALUE)
						visited[j] = true;
			}
		}
		return false;
	}
}