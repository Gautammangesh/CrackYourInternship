class Node {
    int key;
    Node left, right;

    public Node(int item) {
        key = item;
        left = right = null;
    }
}

class Solution {
    public static void findPreSuc(Node root, Node[] pre, Node[] suc, int key) {
        if (root == null) {
            return;
        }

        // If the key is found
        if (root.key == key) {
            // The predecessor is the maximum value in the left subtree
            if (root.left != null) {
                Node temp = root.left;
                while (temp.right != null) {
                    temp = temp.right;
                }
                pre[0] = temp;
            }

            // The successor is the minimum value in the right subtree
            if (root.right != null) {
                Node temp = root.right;
                while (temp.left != null) {
                    temp = temp.left;
                }
                suc[0] = temp;
            }
            return;
        }

        // If the key is smaller than the root's key, go to the left subtree
        if (key < root.key) {
            suc[0] = root;
            findPreSuc(root.left, pre, suc, key);
        } else { // If the key is greater than the root's key, go to the right subtree
            pre[0] = root;
            findPreSuc(root.right, pre, suc, key);
        }
    }
}
