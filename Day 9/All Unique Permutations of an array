class Solution {
    public void nextPermutation(int[] nums) {
        int index = -1;
        for (int i = nums.length - 1; i > 0; i--) {
            if (nums[i] > nums[i - 1]) {
                index = i - 1;
                break;
            }
        }

        if (index == -1) {
            reverse(nums, 0, nums.length - 1);
        } else {
            for (int i = nums.length - 1; i > index; i--) {
                if (nums[i] > nums[index]) {
                    swap(nums, i, index);
                    break;
                }
            }
            reverse(nums, index + 1, nums.length - 1);
        }
    }

    public void reverse(int[] nums, int start, int end) {
        while (start < end) {
            swap(nums, start, end);
            start++;
            end--;
        }
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public List<List<Integer>> uniquePerms(int[] arr) {
        Arrays.sort(arr);
        List<List<Integer>> res = new ArrayList<>();

        do {
            List<Integer> currentPerm = new ArrayList<>();
            for (int num : arr) {
                currentPerm.add(num);
            }
            res.add(currentPerm);
            nextPermutation(arr);
        } while (!isEqual(arr, res.get(0)));

        return res;
    }

    public boolean isEqual(int[] arr, List<Integer> firstPerm) {
        if (arr.length != firstPerm.size()) {
            return false;
        }
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] != firstPerm.get(i)) {
                return false;
            }
        }
        return true;
    }
};